{"version":3,"sources":["constants/types.tsx","Lines/Lines.tsx","constants/lines.tsx","utils/utils.tsx","App/App.tsx","serviceWorker.js","index.js"],"names":["Color","Lines","this","props","lines","currentTrainPositions","height","width","map","line","key","color","data","stations","train","coordinates","strokeWidth","React","PureComponent","LINES","x","y","green","passengers","blue","red","getStartTrainPosition","App","state","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAMYA,E,sFCICC,EAAb,iLACY,IAAD,EACkCC,KAAKC,MAAtCC,EADD,EACCA,MAAOC,EADR,EACQA,sBAEf,OACE,kBAAC,IAAD,CAAQC,OAAQ,IAAKC,MAAO,KACzBH,EAAMI,KAAI,SAAAC,GAAI,OACb,kBAAC,IAAD,CACEC,IAAKD,EAAKE,MACVA,MAAOF,EAAKE,MACZC,KAAMH,EAAKI,cAGdR,EAAsBG,KAAI,SAAAM,GAAK,OAC9B,kBAAC,IAAD,CACEH,MAAM,QACNC,KAAM,CAACE,EAAMC,aACbC,YAAa,YAjBzB,GAA2BC,IAAMC,gB,SDJrBlB,K,UAAAA,E,cAAAA,E,aAAAA,M,KEJL,IAAMmB,EAA6B,CACxC,CACEN,SAAU,CACR,CAAEO,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEbV,MAAOX,EAAMsB,MACbC,WAAY,KAEd,CACEV,SAAU,CACR,CAAEO,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEbV,MAAOX,EAAMwB,KACbD,WAAY,KAEd,CACEV,SAAU,CACR,CAAEO,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEbV,MAAOX,EAAMyB,IACbF,WAAY,MCpCHG,EAAwB,SACnCtB,GADmC,OAGnCA,EAAMI,KAAI,SAAAC,GAAI,MAAK,CACjBM,YAAaN,EAAKI,SAAS,GAC3BF,MAAOF,EAAKE,MACZY,WAAYd,EAAKc,gBCFAI,E,2MACnBC,MAAQ,CACNvB,sBAAuBqB,EAAsBP,I,wEAGrC,IACAd,EAA0BH,KAAK0B,MAA/BvB,sBAER,OACE,yBAAKwB,UAAU,OACb,kBAAC,EAAD,CAAOzB,MAAOe,EAAOd,sBAAuBA,S,GAVnBY,IAAMC,eCNnBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ebe45e4f.chunk.js","sourcesContent":["export interface Line {\n    stations: ReadonlyArray<Station>,\n    color: Color,\n    passengers: number\n}\n\nexport enum Color {\n    red = 'red',\n    green = 'green',\n    blue = 'blue'\n}\n\nexport interface Station {\n    x: number,\n    y: number\n}\n\nexport interface Train {\n    coordinates: Station,\n    color: Color,\n    passengers: number\n}","import React from 'react'\nimport { XYPlot, MarkSeries, LineMarkSeries } from 'react-vis'\n\nimport { Train, Line } from 'constants/types'\n\ninterface Props {\n  lines: ReadonlyArray<Line>;\n  currentTrainPositions: ReadonlyArray<Train>;\n}\n\nexport class Lines extends React.PureComponent<Props> {\n  render() {\n    const { lines, currentTrainPositions } = this.props\n\n    return (\n      <XYPlot height={500} width={500}>\n        {lines.map(line => (\n          <LineMarkSeries\n            key={line.color}\n            color={line.color}\n            data={line.stations}\n          />\n        ))}\n        {currentTrainPositions.map(train => (\n          <MarkSeries\n            color=\"black\"\n            data={[train.coordinates]}\n            strokeWidth={5}\n          />\n        ))}\n      </XYPlot>\n    )\n  }\n}\n","import { Color, Line } from 'constants/types'\n\nexport const LINES: ReadonlyArray<Line> = [\n  {\n    stations: [\n      { x: 1, y: 4 },\n      { x: 2, y: 4 },\n      { x: 3, y: 4 },\n      { x: 4, y: 5 },\n      { x: 5, y: 5 },\n      { x: 6, y: 5 },\n      { x: 7, y: 5 },\n    ],\n    color: Color.green,\n    passengers: 100,\n  },\n  {\n    stations: [\n      { x: 3, y: 6 },\n      { x: 3, y: 5 },\n      { x: 3, y: 4 },\n      { x: 4, y: 3 },\n      { x: 5, y: 3 },\n      { x: 6, y: 3 },\n    ],\n    color: Color.blue,\n    passengers: 200,\n  },\n  {\n    stations: [\n      { x: 5, y: 7 },\n      { x: 5, y: 6 },\n      { x: 5, y: 5 },\n      { x: 4, y: 3 },\n      { x: 3, y: 2 },\n      { x: 3, y: 1 },\n    ],\n    color: Color.red,\n    passengers: 300,\n  },\n]\n","import { Train, Line } from 'constants/types'\n\nexport const getStartTrainPosition = (\n  lines: ReadonlyArray<Line>\n): ReadonlyArray<Train> =>\n  lines.map(line => ({\n    coordinates: line.stations[0],\n    color: line.color,\n    passengers: line.passengers,\n  }))\n","import React from 'react'\n\nimport Lines from 'Lines'\nimport { LINES } from 'constants/lines'\nimport { getStartTrainPosition } from 'utils/utils'\n\nexport default class App extends React.PureComponent {\n  state = {\n    currentTrainPositions: getStartTrainPosition(LINES),\n  }\n\n  render() {\n    const { currentTrainPositions } = this.state\n\n    return (\n      <div className=\"App\">\n        <Lines lines={LINES} currentTrainPositions={currentTrainPositions} />\n      </div>\n    )\n  }\n}\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-vis/dist/style.css'\n\nimport App from './App/App'\nimport * as serviceWorker from 'serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}