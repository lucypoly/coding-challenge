{"version":3,"sources":["actions/actions.tsx","constants/types.tsx","constants/lines.tsx","utils/utils.tsx","reducers/reducers.tsx","reducers/rootReducer.ts","MoveButton/MoveButton.styled.ts","MoveButton/MoveButton.tsx","Navigation/Navigation.tsx","Lines/Lines.tsx","App/App.tsx","store.ts","serviceWorker.js","index.js"],"names":["ActionTypes","Color","Direction","LINES","stations","x","y","color","green","blue","red","getLineByColor","find","line","getNextPosition","currentLine","direction","lineLength","length","currentIndex","findIndex","station","nextIndex","prevIndex","nextDirection","forward","straight","coordinates","moveTrain","train","trainDirection","position","nextPosition","nextCoordinates","getCollisionTrain","state","currentTrain","initialState","moving","passengers","combineReducers","trains","action","payload","type","START_MOVING","collisionTrain","shouldStop","console","log","STOP_MOVING","Button","styled","button","p","MoveButton","interval","handleMoving","props","startMoving","stopMoving","window","clearInterval","setInterval","this","onClick","React","PureComponent","connect","dispatch","Navigation","map","key","lines","height","width","data","strokeWidth","value","style","background","margin","padding","App","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44285554.chunk.js","sourcesContent":["export enum ActionTypes {\n    START_MOVING = 'START_MOVING',\n    STOP_MOVING = 'STOP_MOVING',\n}\n\nexport const startMoving = color => dispatch => {\n  dispatch({\n    type: ActionTypes.START_MOVING,\n    payload: color,\n  })\n}\n\nexport const stopMoving = color => dispatch => {\n  dispatch({\n    type: ActionTypes.STOP_MOVING,\n    payload: color,\n  })\n}\n","export interface Line {\n    stations: ReadonlyArray<Station>,\n    color: Color,\n}\n\nexport enum Color {\n    red = 'red',\n    green = 'green',\n    blue = 'blue'\n}\n\nexport interface Station {\n    x: number,\n    y: number\n}\n\nexport enum Direction {\n    straight = 'straight',\n    forward = 'forward'\n}\nexport interface Train {\n    moving: boolean,\n    coordinates: Station,\n    nextCoordinates: Station,\n    color: Color,\n    passengers: number,\n    direction: Direction,\n}","import { Color, Line } from 'constants/types'\n\nexport const LINES: ReadonlyArray<Line> = [\n  {\n    stations: [\n      { x: 1, y: 4 },\n      { x: 2, y: 4 },\n      { x: 3, y: 4 },\n      { x: 4, y: 5 },\n      { x: 5, y: 5 },\n      { x: 6, y: 5 },\n      { x: 7, y: 5 },\n    ],\n    color: Color.green,\n  },\n  {\n    stations: [\n      { x: 3, y: 6 },\n      { x: 3, y: 5 },\n      { x: 3, y: 4 },\n      { x: 4, y: 3 },\n      { x: 5, y: 3 },\n      { x: 6, y: 3 },\n    ],\n    color: Color.blue,\n  },\n  {\n    stations: [\n      { x: 5, y: 7 },\n      { x: 5, y: 6 },\n      { x: 5, y: 5 },\n      { x: 4, y: 3 },\n      { x: 3, y: 2 },\n      { x: 3, y: 1 },\n    ],\n    color: Color.red,\n  },\n]\n","import { Color, Direction, Line, Station, Train } from 'constants/types'\nimport { LINES } from 'constants/lines'\n\nexport const getLineByColor = (color: Color): Line => {\n  return LINES.find(line => line.color === color)\n}\n\nexport const getNextPosition = (\n  currentLine: Line,\n  direction: Direction,\n  x: number,\n  y: number\n): { coordinates: Station, direction: Direction } => {\n  const lineLength = currentLine.stations.length\n  const currentIndex = currentLine.stations.findIndex(\n    station => station.x === x && station.y === y\n  )\n  // every position when going forward\n  let nextIndex = currentIndex + 1\n  let prevIndex = currentIndex - 1\n  let nextDirection = direction\n\n  // last position when going forward\n  if (nextIndex === lineLength && direction === Direction.forward) {\n    nextIndex = prevIndex\n    nextDirection = Direction.straight\n  }\n  // first position when going straight\n  if (prevIndex === -1 && direction === Direction.straight) {\n    nextIndex = 1\n    nextDirection = Direction.forward\n  }\n  // every position when going straight\n  if (prevIndex > -1 && direction === Direction.straight) {\n    nextIndex = prevIndex\n  }\n\n  return {\n    coordinates: currentLine.stations[nextIndex],\n    direction: nextDirection,\n  }\n}\n\nexport const moveTrain = (train: Train, line: Line) => {\n  const trainDirection = train.direction\n  const { x, y } = train.coordinates\n  const position = getNextPosition(line, trainDirection, x, y)\n  const nextPosition = getNextPosition(\n    line,\n    trainDirection,\n    position.coordinates.x,\n    position.coordinates.y\n  )\n\n  train.coordinates = position.coordinates\n  train.nextCoordinates = nextPosition.coordinates\n  train.direction = position.direction\n}\n\nexport const getCollisionTrain = (state, currentTrain: Train) =>\n  state.find(\n    train =>\n      train.color !== currentTrain.color &&\n      train.nextCoordinates.x === currentTrain.nextCoordinates.x &&\n      train.nextCoordinates.y === currentTrain.nextCoordinates.y\n  )\n","import { ActionTypes } from 'actions/actions'\nimport { Color, Direction, Train } from 'constants/types'\nimport { getCollisionTrain, getLineByColor, moveTrain } from 'utils/utils'\n\nconst initialState: ReadonlyArray<Train> = [\n  {\n    color: Color.green,\n    moving: false,\n    coordinates: { x: 1, y: 4 },\n    nextCoordinates: { x: 2, y: 4 },\n    passengers: 100,\n    direction: Direction.forward,\n  },\n  {\n    color: Color.blue,\n    moving: false,\n    coordinates: { x: 3, y: 6 },\n    nextCoordinates: { x: 3, y: 5 },\n    passengers: 200,\n    direction: Direction.forward,\n  },\n  {\n    color: Color.red,\n    moving: false,\n    coordinates: { x: 5, y: 7 },\n    nextCoordinates: { x: 5, y: 6 },\n    passengers: 300,\n    direction: Direction.forward,\n  },\n]\n\nexport const moveTrainReducer = (state = initialState, action) => {\n  const currentTrain = state.find(train => train.color === action.payload)\n\n  switch (action.type) {\n    case ActionTypes.START_MOVING:\n      const currentLine = getLineByColor(action.payload)\n      const collisionTrain = getCollisionTrain(state, currentTrain)\n      const shouldStop =\n        collisionTrain &&\n        collisionTrain.moving &&\n        collisionTrain.passengers > currentTrain.passengers\n\n      if (shouldStop) {\n        console.log('collision!')\n        currentTrain.moving = false\n      } else {\n        currentTrain.moving = true\n        moveTrain(currentTrain, currentLine)\n      }\n\n      return [...state]\n    case ActionTypes.STOP_MOVING:\n      currentTrain.moving = false\n      return [...state]\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { moveTrainReducer } from './reducers'\n\nexport default combineReducers({ trains: moveTrainReducer })\n","import styled from 'styled-components'\n\nimport { Color } from 'constants/types'\n\ninterface ButtonProps {\n  color: Color;\n}\n\nexport const Button = styled.button<ButtonProps>`\n  background-color: ${p => p.color};\n  color: white;\n  \n  margin: 5px;\n  padding: 15px;\n  border: 0;\n  outline: none;\n  \n  font-size: 24px;\n`\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { Color } from 'constants/types'\nimport { startMoving, stopMoving } from 'actions/actions'\n\nimport * as styled from 'MoveButton/MoveButton.styled'\n\ninterface Props {\n  color: Color;\n  moving: boolean;\n  startMoving(color: Color): void;\n  stopMoving(color: Color): void;\n}\n\nexport class MoveButton extends React.PureComponent<Props> {\n  interval: number\n\n  handleMoving = () => {\n    const { moving, startMoving, color, stopMoving } = this.props\n\n    if (moving) {\n      stopMoving(color)\n      window.clearInterval(this.interval)\n    } else {\n      startMoving(color)\n      this.interval = window.setInterval(() => startMoving(color), 2000)\n    }\n  }\n\n  render() {\n    const { color, moving } = this.props\n\n    return (\n      <styled.Button color={color} onClick={this.handleMoving}>\n        {moving ? 'STOP' : 'START'}\n      </styled.Button>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  startMoving: (color: Color) => dispatch(startMoving(color)),\n  stopMoving: (color: Color) => dispatch(stopMoving(color)),\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(MoveButton)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Train, Color } from 'constants/types'\nimport MoveButton from 'MoveButton'\n\ninterface Props {\n  trains: ReadonlyArray<Train>;\n  startMoving(color: Color): void;\n  stopMoving(color: Color): void;\n}\n\nclass Navigation extends React.PureComponent<Props> {\n  render() {\n    const { trains } = this.props\n\n    return (\n      <>\n        {trains.length &&\n          trains.map(train => (\n            <MoveButton\n              key={`button-${train.color}`}\n              color={train.color}\n              moving={train.moving}\n            />\n          ))}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  trains: state.trains,\n})\n\nexport default connect(mapStateToProps)(Navigation)\n","import React from 'react'\nimport { XYPlot, MarkSeries, LineMarkSeries, Hint } from 'react-vis'\nimport { connect } from 'react-redux'\n\nimport { Train, Line } from 'constants/types'\n\ninterface Props {\n  lines: ReadonlyArray<Line>;\n  trains: ReadonlyArray<Train>;\n}\n\nconst Lines: React.FC<Props> = ({ lines, trains }: Props) => (\n  <XYPlot height={500} width={500}>\n    {lines.map(line => (\n      <LineMarkSeries\n        key={`line-${line.color}`}\n        color={line.color}\n        data={line.stations}\n      />\n    ))}\n    {/*Can't wrap MarkSeries and Hint together because of the library bug*/}\n    {trains.map(train => (\n      <MarkSeries\n        key={`train-${train.color}`}\n        color=\"black\"\n        data={[train.coordinates]}\n        strokeWidth={5}\n      />\n    ))}\n    {trains.map(train => (\n      <Hint\n        key={`passengers-${train.color}`}\n        value={train.coordinates}\n        style={{ background: 'black', margin: '5px', padding: '5px' }}\n      >\n        {train.passengers}\n      </Hint>\n    ))}\n  </XYPlot>\n)\n\nconst mapStateToProps = state => ({\n  trains: state.trains,\n})\n\nexport default connect(mapStateToProps)(Lines)\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from 'store'\n\nimport { LINES } from 'constants/lines'\nimport Navigation from 'Navigation'\nimport Lines from 'Lines'\n\nconst App: React.FC = () => (\n  <Provider store={configureStore()}>\n    <div className=\"App\">\n      <Navigation />\n      <Lines lines={LINES} />\n    </div>\n  </Provider>\n)\n\nexport default App","import { applyMiddleware, createStore } from 'redux'\n\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport rootReducer from './reducers/rootReducer'\n\nexport default function configureStore() {\n  return createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n}\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-vis/dist/style.css'\n\nimport App from './App/App'\nimport * as serviceWorker from 'serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}